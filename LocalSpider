/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package localspider;
import java.io.File;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 *
 * @author Umad Rai
 */
//Local Spider 2 using threads, extended version of Local Spider
public class LocalSpider {

    List<String> listcol;
    ConcurrentHashMap<String, List<String>> index;

    public LocalSpider() {
        listcol = Collections.synchronizedList(new ArrayList<String>());
        index= new ConcurrentHashMap<>();
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        LocalSpider local_spider= new LocalSpider();  //Creating object of the local spider class
        local_spider.startcrawling("D:\\BSCS 3");    //path to crawl
        local_spider.startindexing();     
        while (true) {
            String q = s.nextLine();
            List<String> lv = local_spider.index.get(q);
            if (lv != null) {
                for (int o = 0; o < lv.size(); o++)
                    System.out.println(lv.get(o));
            }
            System.out.print("Enter your key word: ");
        }
    }
    public  void startcrawling(String URL){
        File filestr = new File(URL);
        File file_n;                //will contain file name

        if (filestr.exists() & filestr.isDirectory()) {

            File[] names = filestr.listFiles();                // storing all the files in the file array
            if (names == null) {                            // if directory is empty return from it

                return;
            }
            List<Thread> threads = new ArrayList<>();
            for (int i = 0; i < names.length; i++) {
                file_n = names[i];
                if (file_n.isDirectory()) {
                   Thread t = new Thread(new CrawlingThread(listcol,file_n.getAbsolutePath()));
                    t.start();
                    threads.add(t);
                }
                else {
                    listcol.add(file_n.getAbsolutePath());
                }
            }
            for (Thread thread : threads)
                try {
                    thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
        }
    }
    public  void startindexing(){
        int t_size= listcol.size()/3;           //t_size will contain size on which each thread will work
        List<Thread> threads = new ArrayList<>();
        Thread t = new Thread(new IndexingThread(listcol,0,t_size,index));
        t.start();
        threads.add(t);
        Thread t2 = new Thread(new IndexingThread(listcol,t_size,t_size*2,index));
        t2.start();
        threads.add(t2);
        Thread t3 = new Thread(new IndexingThread(listcol,t_size*2,t_size*3,index));
        t3.start();
        threads.add(t3);
        for (Thread thread : threads)
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
    }
}
